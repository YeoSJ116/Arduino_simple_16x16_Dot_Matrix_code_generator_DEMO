<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Footer" xml:space="preserve">
    <value>
byte Display_Buffer[ Display_Num_Word * 2 ],
     Display_Swap_Buffer[ Display_Num_Word ][ 32 ];
bool Shift_Bit = 0;            // SPI detail config
unsigned int Shift_Count = 0,  // Count var is must be 0
             Display_Word_Count = 0;
byte Message_index = 0;
byte temp = 0x80;

bool enable_virtual = true;
void setup(){
    //가상 장치 지원 기능을 비활성화 하고 싶다면
    //bool enable_virtual = true;을
    //bool enable_virtual = false;로 변경해 주십시오.
    if(enable_virtual)
        Serial.begin(1000000);
    
    SPI.begin();
    SPI.setBitOrder( LSBFIRST );           // LSBFIRST &lt;-&gt; MSBFIRST
    SPI.setClockDivider( SPI_CLOCK_DIV2 ); // 16MHz/16 -&gt; 1MHz SCK frequency
    SPI.setDataMode( SPI_MODE0 );          // Use SPI mode 0
    
    pinMode(LEDARRAY_D, OUTPUT); 
    pinMode(LEDARRAY_C, OUTPUT);
    pinMode(LEDARRAY_B, OUTPUT);
    pinMode(LEDARRAY_A, OUTPUT);
    pinMode(LEDARRAY_G, OUTPUT);
    pinMode(STCP_PIN  , OUTPUT);

    Clear_Display();
}

void loop(){
    Display( Display_Swap_Buffer );
    if(enable_virtual)
        virtual_display( Display_Swap_Buffer );
    Calc_Shift( Display_Num_Word,DP_Buffer );
    Shift_Count++;

    if( Shift_Count % 16 == 0 )
        Message_index++;

    if( Message_index &gt; ( text_count - 1 ))
        Message_index = 0;
}

void Clear_Display(){
    memset(Display_Swap_Buffer[0], 0xFF, Display_Num_Word * 32);
}

void Calc_Shift(unsigned int Display, byte sendingBuffer[200]){
    for(unsigned char i = 0; i &lt; 16; i++){
        if((Display_Swap_Buffer[0][16+i]&amp;0x80) == 0)
            Display_Swap_Buffer[0][i] = ( Display_Swap_Buffer[0][i] &lt;&lt; 1 ) &amp; 0xfe;
        else
            Display_Swap_Buffer[0][i] = ( Display_Swap_Buffer[0][i] &lt;&lt; 1 ) | 0x01;
        for(unsigned char j = 1; j &lt; Display; j++ ){
            if((Display_Swap_Buffer[j][i] &amp; 0x80) == 0)
                Display_Swap_Buffer[j-1][16+i] = (Display_Swap_Buffer[j-1][16+i] &lt;&lt; 1) &amp; 0xfe;
            else
                Display_Swap_Buffer[j-1][16+i] = (Display_Swap_Buffer[j-1][16+i] &lt;&lt; 1) | 0x01;

            if((Display_Swap_Buffer[j][16+i] &amp; 0x80) == 0)
                Display_Swap_Buffer[j][i] = (Display_Swap_Buffer[j][i] &lt;&lt; 1) &amp; 0xfe;
            else
                Display_Swap_Buffer[j][i] = (Display_Swap_Buffer[j][i] &lt;&lt; 1) | 0x01;
        }
    
        if( Shift_Count % 16 &lt; 8 &amp;&amp; Display_Word_Count &lt; Num_Of_Word )
            Shift_Bit = pgm_read_word((&amp;Word[sendingBuffer[Message_index]][i])) &amp; temp;
        else if(Shift_Count%16 &lt; 16 &amp;&amp; Display_Word_Count &lt; Num_Of_Word)
            Shift_Bit = pgm_read_word((&amp;Word[sendingBuffer[Message_index]][16+i])) &amp; temp;
        else
            Shift_Bit = 1;

        if(Shift_Bit == 0)
            Display_Swap_Buffer[Display-1][16+i] = (Display_Swap_Buffer[Display-1][16+i] &lt;&lt; 1) &amp; 0xfe;
        else{
            Shift_Bit = 1;
            Display_Swap_Buffer[Display-1][16+i] = (Display_Swap_Buffer[Display-1][16+i] &lt;&lt; 1) | 0x01;
        }
    }
    temp = (temp &gt;&gt; 1) &amp; 0x7f;
    if( temp == 0x00) 
        temp = 0x80;
}
void virtual_display(const byte dat[][32]){
  for(int i = 0; i &lt; 32; i++)
    for(int j = 0; j &lt; Display_Num_Word; j++)
      Serial.write((dat[j][i]));
}

void Display(const unsigned char dat[][32]){
    for(unsigned char i = 0; i &lt; 16; i++){
        digitalWrite( LEDARRAY_G, HIGH );
        for(int j = 0; j &lt; Display_Num_Word; j++){
            int sum = j*2;
            Display_Buffer[sum]    = dat[j][ i ];      
            Display_Buffer[sum+1]  = dat[j][ i+16 ];
        }
        for(int j = ( Display_Num_Word * 2 ) - 1; j &gt;= 0; j--)
            shiftOutSPI(Display_Buffer[ j ]);

        Scan_Line( i );
        digitalWrite( LEDARRAY_G, LOW );
        delayMicroseconds( runs );
    }   
}

//디코더 열(Column) 제어
void Scan_Line( unsigned char m){
    digitalWrite( LEDARRAY_D, (m &amp; (1&lt;&lt;3)) != 0 ); // m = 3 =&gt; 0
    digitalWrite( LEDARRAY_C, (m &amp; (1&lt;&lt;2)) != 0 ); // m = 3 =&gt; 0
    digitalWrite( LEDARRAY_B, (m &amp; (1&lt;&lt;1)) != 0 ); // m = 3 =&gt; 1
    digitalWrite( LEDARRAY_A, (m &amp; (1&lt;&lt;0)) != 0 ); // m = 3 =&gt; 1
}

void shiftOutSPI( byte dat ){
    //Latch open &gt;&gt; data in &gt;&gt; Latch close
    digitalWrite( STCP_PIN, LOW ); //전송 가능한 상태
    SPI.transfer( dat );           //데이터 전송
    digitalWrite( STCP_PIN, HIGH); //더이상 데이터를 받지 않고 데이터 적용
}</value>
  </data>
  <data name="Header" xml:space="preserve">
    <value>#include &lt;Arduino.h&gt;
#include &lt;avr/pgmspace.h&gt;
#include &lt;SPI.h&gt;

//Shift register pin value (By using SPI communication)
//쉬프트(74HC595N) 레지스터를 SPI 통신으로 제어할때 필요한 핀 번호 입니다.
const byte STCP_PIN = 7,  // Latch(Storage)상태 1: 쓰기, 0: 적용
           DS_PIN   = 11, // Data In: CLK 주기에 맞춰 데이터 전송
           SHCP_PIN = 13; // CLK: 데이터 동기화를 위한 Clock 신호

#define LEDARRAY_D 2 //CD4511 디코더 DIN핀: 4bit(0~15)의 4번째 비트
#define LEDARRAY_C 3 //CD4511 디코더 CIN핀: 4bit(0~15)의 3번째 비트
#define LEDARRAY_B 4 //CD4511 디코더 BIN핀: 4bit(0~15)의 2번째 비트
#define LEDARRAY_A 5 //CD4511 디코더 AIN핀: 4bit(0~15)의 1번째 비트
#define LEDARRAY_G 6 //74HC595N 레지스터 OE핀: 전체 전원 제어 1: 꺼짐, 0: 켜짐
</value>
  </data>
</root>