<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Footer" xml:space="preserve">
    <value>
unsigned char Display_Buffer[ Display_Num_Word * 2 ];
unsigned char Display_Swap_Buffer[ Display_Num_Word ][ 32 ];
bool Shift_Bit = 0,            // SPI detail config
     Flag_Shift = 0;
unsigned int Timer0_Count = 0, // Count var is must be 0
             Shift_Count = 0,
             Display_Word_Count = 0;
unsigned char Message_index = 0;
unsigned char temp = 0x80;

void setup()
{
    SPI.begin();
    SPI.setBitOrder( LSBFIRST );           // LSBFIRST &lt;-&gt; MSBFIRST
    SPI.setClockDivider( SPI_CLOCK_DIV2 ); // 16MHz/16 -&gt; 1MHz SCK frequency
    SPI.setDataMode( SPI_MODE0 );          // Use SPI mode 0

    pinMode(LEDARRAY_D, OUTPUT); 
    pinMode(LEDARRAY_C, OUTPUT);
    pinMode(LEDARRAY_B, OUTPUT);
    pinMode(LEDARRAY_A, OUTPUT);
    pinMode(LEDARRAY_G, OUTPUT);
    pinMode(STCP_PIN  , OUTPUT);

    Clear_Display();
}

void loop()
{
    Display( Display_Swap_Buffer );  
    Calc_Shift( Display_Num_Word,DP_Buffer );
    Shift_Count++;

    if( Shift_Count % 16 == 0 )
        Message_index++;

    if( Message_index &gt; ( serial_index - 1 ))
        Message_index = 0;
}

void Clear_Display()
{
    unsigned char i, j;
    for(j = 0; j &lt; Display_Num_Word; j++)
        for(i = 0 ; i &lt; 32 ;i++)
            Display_Swap_Buffer[j][i] = 0xFF;
}

void Calc_Shift(unsigned int Display, unsigned char sendingBuffer[200])
{
    unsigned char i,j;

    for(i = 0; i &lt; 16; i++)
    {
        if((Display_Swap_Buffer[0][16+i]&amp;0x80) == 0)
            Display_Swap_Buffer[0][i] = ( Display_Swap_Buffer[0][i] &lt;&lt; 1 ) &amp; 0xfe;
        else
            Display_Swap_Buffer[0][i] = ( Display_Swap_Buffer[0][i] &lt;&lt; 1 ) | 0x01;
        for( j = 1; j &lt; Display; j++ )
        {
            if((Display_Swap_Buffer[j][i] &amp; 0x80) == 0)
                Display_Swap_Buffer[j-1][16+i] = (Display_Swap_Buffer[j-1][16+i] &lt;&lt; 1) &amp; 0xfe;
            else
                Display_Swap_Buffer[j-1][16+i] = (Display_Swap_Buffer[j-1][16+i] &lt;&lt; 1) | 0x01;

            if((Display_Swap_Buffer[j][16+i] &amp; 0x80) == 0)
                Display_Swap_Buffer[j][i] = (Display_Swap_Buffer[j][i] &lt;&lt; 1) &amp; 0xfe;
            else
                Display_Swap_Buffer[j][i] = (Display_Swap_Buffer[j][i] &lt;&lt; 1) | 0x01;
        }
    }
    
    if( Shift_Count % 16 &lt; 8 &amp;&amp; Display_Word_Count &lt; Num_Of_Word )
        Shift_Bit = pgm_read_word((&amp;Word[sendingBuffer[Message_index]][i])) &amp; temp;
    else if(Shift_Count%16 &lt; 16 &amp;&amp; Display_Word_Count &lt; Num_Of_Word)
        Shift_Bit = pgm_read_word((&amp;Word[sendingBuffer[Message_index]][16+i])) &amp; temp;
    else
        Shift_Bit = 1;

    if(Shift_Bit == 0)
        Display_Swap_Buffer[Display-1][16+i] = (Display_Swap_Buffer[Display-1][16+i] &lt;&lt; 1) &amp; 0xfe;
    else
    {
        Shift_Bit = 1;
        Display_Swap_Buffer[Display-1][16+i] = (Display_Swap_Buffer[Display-1][16+i] &lt;&lt; 1) | 0x01;
    }

    temp = (temp &gt;&gt; 1) &amp; 0x7f;
    if( temp == 0x00) 
        temp = 0x80;
}

void Display(const unsigned char dat[][32])               
{
    unsigned char i;
    for(i = 0; i &lt; 16; i++)
    {
        for(int j = 0; j &lt; Display_Num_Word; j++)
        {
            digitalWrite( LEDARRAY_G, HIGH );
            int sum = j*2;
            Display_Buffer[sum]    = dat[j][ i ];      
            Display_Buffer[sum+1]  = dat[j][ i+16 ];
        }
        for(int j = ( Display_Num_Word * 2 ) - 1; j &gt;= 0; j--)
            shiftOutSPI(Display_Buffer[ j ]);

        Scan_Line( i );
        digitalWrite( LEDARRAY_G, LOW );
        delayMicroseconds( runs );                  
    }   
}

void Scan_Line( unsigned char m)
{
    switch(m)
    {
        case 0:
            digitalWrite( LEDARRAY_D, LOW );
            digitalWrite( LEDARRAY_C, LOW );
            digitalWrite( LEDARRAY_B, LOW );
            digitalWrite( LEDARRAY_A, LOW );
            break;
        case 1:
            digitalWrite( LEDARRAY_D, LOW );
            digitalWrite( LEDARRAY_C, LOW );
            digitalWrite( LEDARRAY_B, LOW );
            digitalWrite( LEDARRAY_A, HIGH);
            break;
        case 2:
            digitalWrite( LEDARRAY_D, LOW );
            digitalWrite( LEDARRAY_C, LOW );
            digitalWrite( LEDARRAY_B, HIGH);
            digitalWrite( LEDARRAY_A, LOW );
            break;
        case 3:
            digitalWrite( LEDARRAY_D, LOW );
            digitalWrite( LEDARRAY_C, LOW );
            digitalWrite( LEDARRAY_B, HIGH);
            digitalWrite( LEDARRAY_A, HIGH);
            break;
        case 4:
            digitalWrite( LEDARRAY_D, LOW );
            digitalWrite( LEDARRAY_C, HIGH);
            digitalWrite( LEDARRAY_B, LOW );
            digitalWrite( LEDARRAY_A, LOW );
            break;
        case 5:
            digitalWrite( LEDARRAY_D, LOW );
            digitalWrite( LEDARRAY_C, HIGH);
            digitalWrite( LEDARRAY_B, LOW );
            digitalWrite( LEDARRAY_A, HIGH);
            break;
        case 6:
            digitalWrite( LEDARRAY_D, LOW );
            digitalWrite( LEDARRAY_C, HIGH);
            digitalWrite( LEDARRAY_B, HIGH);
            digitalWrite( LEDARRAY_A, LOW );
            break;
        case 7:
            digitalWrite( LEDARRAY_D, LOW );
            digitalWrite( LEDARRAY_C, HIGH);
            digitalWrite( LEDARRAY_B, HIGH);
            digitalWrite( LEDARRAY_A, HIGH);
            break;
        case 8:
            digitalWrite( LEDARRAY_D, HIGH);
            digitalWrite( LEDARRAY_C, LOW );
            digitalWrite( LEDARRAY_B, LOW );
            digitalWrite( LEDARRAY_A, LOW );
            break;
        case 9:
            digitalWrite( LEDARRAY_D, HIGH);
            digitalWrite( LEDARRAY_C, LOW );
            digitalWrite( LEDARRAY_B, LOW );
            digitalWrite( LEDARRAY_A, HIGH);
            break;
        case 10:
            digitalWrite( LEDARRAY_D, HIGH);
            digitalWrite( LEDARRAY_C, LOW );
            digitalWrite( LEDARRAY_B, HIGH);
            digitalWrite( LEDARRAY_A, LOW );
            break;
        case 11:
            digitalWrite( LEDARRAY_D, HIGH);
            digitalWrite( LEDARRAY_C, LOW );
            digitalWrite( LEDARRAY_B, HIGH);
            digitalWrite( LEDARRAY_A, HIGH);       
            break;
        case 12:
            digitalWrite( LEDARRAY_D, HIGH);
            digitalWrite( LEDARRAY_C, HIGH);
            digitalWrite( LEDARRAY_B, LOW );
            digitalWrite( LEDARRAY_A, LOW );       
            break;
        case 13:
            digitalWrite( LEDARRAY_D, HIGH);
            digitalWrite( LEDARRAY_C, HIGH);
            digitalWrite( LEDARRAY_B, LOW );
            digitalWrite( LEDARRAY_A, HIGH);
            break;
        case 14:
            digitalWrite( LEDARRAY_D, HIGH);
            digitalWrite( LEDARRAY_C, HIGH);
            digitalWrite( LEDARRAY_B, HIGH);
            digitalWrite( LEDARRAY_A, LOW );
            break;
        case 15:
            digitalWrite( LEDARRAY_D, HIGH);
            digitalWrite( LEDARRAY_C, HIGH);
            digitalWrite( LEDARRAY_B, HIGH);
            digitalWrite( LEDARRAY_A, HIGH);
            break;
        default : break;
    }
}

void shiftOutSPI( unsigned char dat ) 
{
    unsigned char i;
    digitalWrite( STCP_PIN, LOW );
    digitalWrite( STCP_PIN, LOW );

    SPI.transfer( dat );
    digitalWrite( STCP_PIN, HIGH);
    digitalWrite( STCP_PIN, LOW );
}</value>
  </data>
  <data name="Header" xml:space="preserve">
    <value>#include &lt;Arduino.h&gt;
#include &lt;avr/pgmspace.h&gt;
#include &lt;SPI.h&gt;

//SPI PIN Value
const byte STCP_PIN = 7,  // Latch
           DS_PIN   = 11, // Data In
           SHCP_PIN = 13; // CLK

#define LEDARRAY_D 2
#define LEDARRAY_C 3
#define LEDARRAY_B 4
#define LEDARRAY_A 5
#define LEDARRAY_G 6
</value>
  </data>
</root>